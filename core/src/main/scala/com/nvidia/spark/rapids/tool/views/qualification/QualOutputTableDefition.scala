/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.nvidia.spark.rapids.tool.views.qualification

/**
 * This file contains the definition of the tables that are used to generate the
 * qualification report.
 *
 * The definition of the tables is stored in a YAML file. The YAML file is
 * expected to have the following structure:
 *
 * `qualTableDefinitions`:
 *   - `label`: The label of the table.
 *   - `description`: The description of the table.
 *   - `fileName`: The name of the file where the table should be written.
 *   - `scope`: The scope of the table. This can be either "global" or "per-app".
 *   - `columns`: The columns of the table. Each column is represented as a
 *     `QualOutputTableColumn` object.
 *
 * The main function `loadConfig` is used to load the YAML file and parse it
 * into a `QualTableYaml` object.
 *
 * The `generateMarkdown` function can be used to generate a markdown file
 * that contains the documentation for the tables.
 */

case class QualOutputTableColumn(
    name: String,
    dataType: String,
    description: String)

case class QualOutputTableDefinition(
    label: String,
    description: Option[String],
    fileName: String,
    fileFormat: String,
    scope: String,
    columns: Seq[QualOutputTableColumn]) {
  def isPerApp : Boolean = scope == "per-app"
  def isGlobal: Boolean = scope == "global"
}

case class QualTableYaml(qualTableDefinitions: Seq[QualOutputTableDefinition]) {
  val strB = new StringBuilder
  private def addLine(c: String): Unit = {
    strB.append(s"$c\n")
  }
  // better to append two new lines following headers
  private def addHeader(c: String): Unit = {
    strB.append(s"$c\n\n")
  }
  // for table prefix table with a new line
  private def addColumnHeader(c: String, separator: String): Unit = {
    addLine(s"\n$c")
    addLine(separator)
  }

  def generateMarkdown(outputPath: String): Unit = {
    addLine("<!-- Generated by QualTableYaml.generateMarkdown(). DO NOT EDIT! -->\n")
    addHeader("# Qualification core output format")
    val introPara =
      """This document contains the definitions of the tables generated by the core
        |Qualification tool.
        |
        |The qualification tool will create a directory `qual_core_output` in the output directory.
        |The summary report goes to subfolder `qual_core_output`
        |
        |## Directory structure
        |
        |The tool generates summary reports located directly under `qual_core_output` directory
        |along with detailed per-app reports located under `qual_core_output/*` sub-directory
        |depending on the type of the report type.
        |
        |The tree structure of the output directory is as follows:
        |""".stripMargin
    addLine(introPara)
    addLine("```\nqual_core_output\n" +
        "├── apps_summary.csv\n" +
        "├── status.csv\n" +
        "├── runtime.properties\n" +
        "├── tuning\n" +
        "├── raw_metrics\n" +
        "└── qual_metrics\n" +
        "      ├── app-001-0001\n" +
        "      |   ├── cluster_information.json\n" +
        "      |   ├── execs.csv\n" +
        "      |   ├── operators_stats.csv\n" +
        "      |   ├── persql.csv\n" +
        "      |   ├── stages.csv\n" +
        "      |   ├── unsupported_operators.csv\n```")
    val directoryList =
      """* *raw_metrics*: contains the raw Spark metrics report in CSV formats
         |* *qual_metrics*: contains the qualification metrics report in CSV formats
         |* *tuning*: contains per-app AutoTuner recommendations.
         |""".stripMargin
    addLine(directoryList)
    // backward compatibility table
    addHeader("## Backward compatibility note (prior to 25.06 release)")
    addLine("With 25.06 release, the output structure of the qual core has changed:\n")
    // generate table to show the mapping between old and new output
    addColumnHeader("| Element | Legacy | 25.06+ |", "| --- | --- | --- |")
    addLine("| root dir | `rapids_4_spark_qualification_output` | `qual_core_output` |")
    addLine("| apps summary | `rapids_4_spark_qualification_output.csv` | `apps_summary.csv` |")
    addLine("| status | `rapids_4_spark_qualification_status.csv` | `status.csv` |")
    addLine("| per-sql report | `rapids_4_spark_qualification_output_persql.csv` " +
      "| per-app qual_metrics `persql.csv` |")
    addLine("| execs report | `rapids_4_spark_qualification_output_execs.csv` " +
      "| per-app qual_metrics `execs.csv` |")
    addLine("| unsupported ops " +
      "| `rapids_4_spark_qualification_output_unsupportedOperators.csv` " +
      "| per-app qual_metrics `unsupported_operators.csv` |")
    addLine("| stages report " +
      "| `rapids_4_spark_qualification_output_stages.csv` " +
      "| per-app qual_metrics `stages.csv` |")
    addLine("| cluster CSV report " +
      "| `rapids_4_spark_qualification_output_cluster_information.csv` " +
      "| Removed |")
    addLine("| cluster Json report " +
      "| `rapids_4_spark_qualification_output_cluster_information.json` " +
      "| per-app qual_metrics `cluster_information.json` |")
    val tableDefSec =
      """
        |## Qualification Table definitions
        |
        |This document contains the definitions of the tables generated by the core
        |Qualification tool.
        |
        |The output files are defined in the following format:
        |* label: The label of the table.
        |* scope: The scope of the table. This can be either "global" or "per-app".
        |* description: The description of the table.
        |* fileFormat: the type of the generated file. By default, it is CSV file unless specified.
        |* fileName: The name of the file where the table should be written.
        |* columns: The columns of the table.
        |  * name: column name.
        |  * dataType: column data type.
        |  * description: column description.
        |""".stripMargin
    addLine(tableDefSec)
    // add table definitions
    qualTableDefinitions.foreach { definition =>
      addHeader(s"\n### ${definition.label}")
      addLine(s"* _Scope_: ${definition.scope}")
      addLine(s"* _Description_: ${definition.description.getOrElse("N/A")}\n")
      // table to list the columns
      addColumnHeader("| Column Name | Description |", "| --- | --- |")
      definition.columns.foreach { col =>
        addLine(s"| ${col.name} | ${col.description} |")
      }
    }

    import java.nio.file.{Files, Paths}
    import java.nio.charset.StandardCharsets

    Files.write(Paths.get(outputPath), strB.toString().getBytes(StandardCharsets.UTF_8))
  }
}
